// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/api.twirp.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Flight with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Flight) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Flight with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FlightMultiError, or nil if none found.
func (m *Flight) ValidateAll() error {
	return m.validate(true)
}

func (m *Flight) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for From

	// no validation rules for To

	if len(errors) > 0 {
		return FlightMultiError(errors)
	}

	return nil
}

// FlightMultiError is an error wrapping multiple validation errors returned by
// Flight.ValidateAll() if the designated constraints aren't met.
type FlightMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlightMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlightMultiError) AllErrors() []error { return m }

// FlightValidationError is the validation error returned by Flight.Validate if
// the designated constraints aren't met.
type FlightValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlightValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlightValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlightValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlightValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlightValidationError) ErrorName() string { return "FlightValidationError" }

// Error satisfies the builtin error interface
func (e FlightValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlight.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlightValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlightValidationError{}

// Validate checks the field values on GetEndpointReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetEndpointReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEndpointReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetEndpointReqMultiError,
// or nil if none found.
func (m *GetEndpointReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEndpointReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFlights() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetEndpointReqValidationError{
						field:  fmt.Sprintf("Flights[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetEndpointReqValidationError{
						field:  fmt.Sprintf("Flights[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEndpointReqValidationError{
					field:  fmt.Sprintf("Flights[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetEndpointReqMultiError(errors)
	}

	return nil
}

// GetEndpointReqMultiError is an error wrapping multiple validation errors
// returned by GetEndpointReq.ValidateAll() if the designated constraints
// aren't met.
type GetEndpointReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEndpointReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEndpointReqMultiError) AllErrors() []error { return m }

// GetEndpointReqValidationError is the validation error returned by
// GetEndpointReq.Validate if the designated constraints aren't met.
type GetEndpointReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEndpointReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEndpointReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEndpointReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEndpointReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEndpointReqValidationError) ErrorName() string { return "GetEndpointReqValidationError" }

// Error satisfies the builtin error interface
func (e GetEndpointReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEndpointReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEndpointReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEndpointReqValidationError{}

// Validate checks the field values on GetEndpointResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetEndpointResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEndpointResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEndpointRespMultiError, or nil if none found.
func (m *GetEndpointResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEndpointResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for From

	// no validation rules for To

	if len(errors) > 0 {
		return GetEndpointRespMultiError(errors)
	}

	return nil
}

// GetEndpointRespMultiError is an error wrapping multiple validation errors
// returned by GetEndpointResp.ValidateAll() if the designated constraints
// aren't met.
type GetEndpointRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEndpointRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEndpointRespMultiError) AllErrors() []error { return m }

// GetEndpointRespValidationError is the validation error returned by
// GetEndpointResp.Validate if the designated constraints aren't met.
type GetEndpointRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEndpointRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEndpointRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEndpointRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEndpointRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEndpointRespValidationError) ErrorName() string { return "GetEndpointRespValidationError" }

// Error satisfies the builtin error interface
func (e GetEndpointRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEndpointResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEndpointRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEndpointRespValidationError{}
